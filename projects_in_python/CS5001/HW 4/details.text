HW 4/kmeans_driver.py:
57: George Dunnery -- (Warning) [0.0]
	# Comments should be formatted like this
72: George Dunnery -- (Info) [0.0]
	Good job delegating this task to a re-usable function!
95: George Dunnery -- (Error) [0.0]
	(Correctness) Random selection does not restrict each centroid to a particular chunk of the list.
95: George Dunnery -- (Info) [0.0]
	A while loop can be used to avoid duplicates:

centroids_list = []
# While we don't have enough centroids, keep trying
while len(centroids_list) < CLUSTERS:
    # Pick random index and get the point coords
    index = random.randint(0, len(DATA) - 1)
    candidate = DATA[index]
    # If it is not already in the list, accept it
    if candidate not in centroids_list:
         centroids_list.append(candidate)
100: George Dunnery -- (Info) [0.0]
	Can you think of a way to refactor this code to work for an aribtary k value (i.e. different numbers of clusters, perhaps set by a constant variable)? How can you use loops and lists to avoid declarations like var_1, var_2, etc. ?
118: George Dunnery -- (Info) [-7.7]
	P3 -- Correctness   85
P3 -- Readability   100
P3 -- Documentation 100
P3 -- Efficiency    100
P3 -- AMAZING       0
P3 -- TOTAL         89.75
==================================================
HW 4/mbta.py:
23: George Dunnery -- (Info) [0.0]
	Great way to check if a station exists while accounting for any case in user input!
39: George Dunnery -- (Error) [0.0]
	(Correctness) This elif statement is unreachable because if both stations are valid, then the code will enter the if statement above and return "Alewife" or "Ashmont" according to whichever it encounters first.

This statement should come before the loop inside the if statement.

Notice that, in mbta_directions.py, the direction is not printed out for this case. Try printing the direction with the "I can't help you with that one!" message in mbta_directions.py to see this demonstrated.
49: George Dunnery -- (Warning) [0.0]
	# Comments should be formatted like this
56: George Dunnery -- (Info) [0.0]
	Nice use of the absolute value function to simplify the return statement!
58: George Dunnery -- (Warning) [0.0]
	Simple/short conditionals don't need to be spaced out so much, see my comment in upc.py for an example of how I would recommend vertically spacing these out.
65: George Dunnery -- (Info) [0.0]
	P2 -- Correctness   70   (See test suite)
P2 -- Readability   100
P2 -- Documentation 100
P2 -- Efficiency    100
P2 -- AMAZING       2
P2 -- TOTAL         83.5
==================================================
HW 4/mbta_directions_v2.py:
18: George Dunnery -- (Info) [0.0]
	Great job extending this code to take arguments from the command line!
==================================================
HW 4/mbta_test_suite.py:
32: George Dunnery -- (Error) [0.0]
	(Correctness) Test suite appears to be a copy of mbta_directions.py. A test suite should give inputs to each of the tested functions, compare the returned value(s) to the expected value(s), and print out a detailed report of the tests including totals for tests passed and failed.
==================================================
HW 4/mbta_directions.py:
1: George Dunnery -- (Warning) [0.0]
	Please don't submit supplemental materials.
==================================================
HW 4/upc.py:
29: George Dunnery -- (Warning) [0.0]
	# Comments should be formatted like this
31: George Dunnery -- (Info) [0.0]
	I like that you created a new list before reversing the elements! This way we do not mutate the list the function caller gave to us! Great job!
33: George Dunnery -- (Warning) [0.0]
	Short conditionals like this don't need to be spaced out so much. Here's how I would recommend vertically spacing this part:

    # Comment about what loop does
    for i in range(len(digits)):  
        if digits[i] == 0:
            num_of_zero += 1
        elif i % 2 == 0:
            check_sum += digits[i]
        elif i % 2 != 0:
            check_sum += (3*digits[i])
            
    # Comment about what we check for after loop
    if num_of_zero == len(digits):
        return False
    elif check_sum % 10 == 0:
        return True
    else:
        return False



46: George Dunnery -- (Info) [0.0]
	To check for this special case before the common case, try:
if sum(digits) == 0:
56: George Dunnery -- (Info) [0.0]
	P1 -- Correctness   100
P1 -- Readability   100
P1 -- Documentation 100
P1 -- Efficiency    100
P1 -- AMAZING       0
P1 -- TOTAL         98.00
==================================================
HW 4/HW4.txt:
1: George Dunnery -- (Warning) [0.0]
	Please do not submit __pycache__ or supplemental materials.
58: George Dunnery -- (Info) [0.0]
	Written: 100